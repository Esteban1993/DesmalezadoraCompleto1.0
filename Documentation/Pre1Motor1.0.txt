=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "IntTiempo" (component TimerInt)
   - IntTiempo_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - IntTiempo_Disable -This method disables the component - it stops the timer. No events will be generated.
   - IntTiempo_EnableEvent -This method enables the events.
   - IntTiempo_DisableEvent -This method disables the events.

Module "CtrlPID_DD" (component PID_Float)
   - CtrlPID_DD_Control -Control function. Must be called every T time.
   - CtrlPID_DD_Reset -Reset the PID.
   - CtrlPID_DD_Set_K -Change the K parameter.
   - CtrlPID_DD_Set_Ti -Change the Ti parameter.
   - CtrlPID_DD_Set_Td -Change the Td parameter.

Module "CtrlPID_DI" (component PID_Float)
   - CtrlPID_DI_Control -Control function. Must be called every T time.
   - CtrlPID_DI_Reset -Reset the PID.
   - CtrlPID_DI_Set_K -Change the K parameter.
   - CtrlPID_DI_Set_Ti -Change the Ti parameter.
   - CtrlPID_DI_Set_Td -Change the Td parameter.

Module "Btn_SW1"   (component ExtInt)
   - Btn_SW1_Enable -Enable the component - the external events are accepted. This method is available only if HW module allows 
                enable/disable of the interrupt.
   - Btn_SW1_Disable -Disable the component - the external events are not accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - Btn_SW1_GetVal -Returns the actual value of the input pin of the component.

Module "Btn_SW2"   (component ExtInt)
   - Btn_SW2_Enable -Enable the component - the external events are accepted. This method is available only if HW module allows 
                enable/disable of the interrupt.
   - Btn_SW2_Disable -Disable the component - the external events are not accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - Btn_SW2_GetVal -Returns the actual value of the input pin of the component.

Module "MCUC1"     (component McuLibConfig)

Module "Out_PWM_DI" (component PWM)
   - Out_PWM_DI_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - 
                FF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities 
                and on the selected period.
   - Out_PWM_DI_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Out_PWM_DI_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Out_PWM_DI_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "TTemp"     (component TimerUnit_LDD)
   - TTemp_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TTemp_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained 
                within the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that 
                are not generated (See the "Events" tab in the Component inspector) are not handled by this method. In this 
                case the method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - TTemp_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the Component 
                inspector) are not handled by this method. See also method <SetEventMask>.
   - TTemp_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TTemp_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user 
                responsibility to use value below selected period. This method is available when at least one channel is 
                configured.
   - TTemp_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.

Module "TPWM"      (component TimerUnit_LDD)
   - TPWM_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TPWM_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TPWM_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TPWM_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TPWM_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TPWM_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "Out_PWM_DD" (component PWM)
   - Out_PWM_DD_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - 
                FF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities 
                and on the selected period.
   - Out_PWM_DD_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Out_PWM_DD_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Out_PWM_DD_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Out_PWM_TD" (component PWM)
   - Out_PWM_TD_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - 
                FF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities 
                and on the selected period.
   - Out_PWM_TD_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Out_PWM_TD_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Out_PWM_TD_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "TPulsos"   (component TimerUnit_LDD)
   - TPulsos_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TPulsos_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained 
                within the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that 
                are not generated (See the "Events" tab in the Component inspector) are not handled by this method. In this 
                case the method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - TPulsos_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the 
                Component inspector) are not handled by this method. See also method <SetEventMask>.
   - TPulsos_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and 
                if counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TPulsos_GetCaptureValue -Returns the content of capture register specified by the parameter ChannelIdx. This method is 
                available when at least one channel is configured.
   - TPulsos_SelectCaptureEdge -Sets the type of edge for input capture on selected channel input. This method is available 
                when at least one channel is configured.

Module "Out_PWM_TI" (component PWM)
   - Out_PWM_TI_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - 
                FF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities 
                and on the selected period.
   - Out_PWM_TI_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - Out_PWM_TI_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - Out_PWM_TI_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Input_Encoder_DI" (component Capture)
   - Input_Encoder_DI_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Input_Encoder_DI_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).

Module "Input_Encoder_DD" (component Capture)
   - Input_Encoder_DD_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Input_Encoder_DD_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).

Module "Input_Encoder_TI" (component Capture)
   - Input_Encoder_TI_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Input_Encoder_TI_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).

Module "Input_Encoder_TD" (component Capture)
   - Input_Encoder_TD_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Input_Encoder_TD_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).

Module "ADC_I"     (component ADC)
   - ADC_I_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADC_I_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - ADC_I_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this 
                method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is 
                less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC_I_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC_I_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.

Module "IntDireccion" (component TimerInt)
   - IntDireccion_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - IntDireccion_Disable -This method disables the component - it stops the timer. No events will be generated.
   - IntDireccion_EnableEvent -This method enables the events.
   - IntDireccion_DisableEvent -This method disables the events.

Module "BitLed_Verde" (component BitIO)
   - BitLed_Verde_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - BitLed_Verde_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BitLed_Verde_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitLed_Verde_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - BitLed_Verde_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "BitOut_DIR_SENT" (component BitIO)
   - BitOut_DIR_SENT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - BitOut_DIR_SENT_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BitOut_DIR_SENT_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitOut_DIR_SENT_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - BitOut_DIR_SENT_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "ReceptorVelocidad" (component Capture)
   - ReceptorVelocidad_Enable -This method enables the component - it starts the capture. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - ReceptorVelocidad_Disable -This method disables the component - it stops the capture. No events will be generated.
   - ReceptorVelocidad_Reset -This method resets the counter register (see implementation note in <General Info>).
   - ReceptorVelocidad_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).

Module "TReceptor" (component TimerUnit_LDD)
   - TReceptor_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TReceptor_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained 
                within the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that 
                are not generated (See the "Events" tab in the Component inspector) are not handled by this method. In this 
                case the method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - TReceptor_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the 
                Component inspector) are not handled by this method. See also method <SetEventMask>.
   - TReceptor_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and 
                if counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TReceptor_GetCaptureValue -Returns the content of capture register specified by the parameter ChannelIdx. This method is 
                available when at least one channel is configured.
   - TReceptor_SelectCaptureEdge -Sets the type of edge for input capture on selected channel input. This method is available 
                when at least one channel is configured.

Module "ReceptorDireccion" (component Capture)
   - ReceptorDireccion_Enable -This method enables the component - it starts the capture. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - ReceptorDireccion_Disable -This method disables the component - it stops the capture. No events will be generated.
   - ReceptorDireccion_Reset -This method resets the counter register (see implementation note in <General Info>).
   - ReceptorDireccion_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in 
                <General Info>). The method does not return valid value after initialization or after <Reset> until new capture 
                event (even if the returned Error code is ERR_OK).

Module "BitOut_DIR_PWM" (component BitIO)
   - BitOut_DIR_PWM_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - BitOut_DIR_PWM_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BitOut_DIR_PWM_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitOut_DIR_PWM_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - BitOut_DIR_PWM_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "BitOut_DIR_EN" (component BitIO)
   - BitOut_DIR_EN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - BitOut_DIR_EN_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BitOut_DIR_EN_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitOut_DIR_EN_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - BitOut_DIR_EN_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "CtrlPID_TI" (component PID_Float)
   - CtrlPID_TI_Control -Control function. Must be called every T time.
   - CtrlPID_TI_Reset -Reset the PID.
   - CtrlPID_TI_Set_K -Change the K parameter.
   - CtrlPID_TI_Set_Ti -Change the Ti parameter.
   - CtrlPID_TI_Set_Td -Change the Td parameter.

Module "CtrlPID_TD" (component PID_Float)
   - CtrlPID_TD_Control -Control function. Must be called every T time.
   - CtrlPID_TD_Reset -Reset the PID.
   - CtrlPID_TD_Set_K -Change the K parameter.
   - CtrlPID_TD_Set_Ti -Change the Ti parameter.
   - CtrlPID_TD_Set_Td -Change the Td parameter.

Module "Out_Reversa" (component BitIO)
   - Out_Reversa_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - Out_Reversa_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Out_Reversa_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - Out_Reversa_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Out_Reversa_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "UART_MODBUS" (component AsynchroSerial)
   - UART_MODBUS_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - UART_MODBUS_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) 
                SendChar method only stores data into an output buffer. In case of a zero output buffer size, only one 
                character can be stored. Enabling the component (Enable method) starts the transmission of the stored data. 
                This method is available only if the transmitter property is enabled.
   - UART_MODBUS_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - UART_MODBUS_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of 
                the output buffer is defined and the transmitter property is enabled.
   - UART_MODBUS_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer 
                is defined and the receiver property is enabled.
   - UART_MODBUS_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer 
                is defined and the receiver property is enabled.
   - UART_MODBUS_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - UART_MODBUS_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.
   - UART_MODBUS_TurnTxOn -Turns on the transmitter. This method is available only if the transmitter property is enabled.
   - UART_MODBUS_TurnTxOff -Turns off the transmitter. This method is available only if the transmitter property is enabled.
   - UART_MODBUS_TurnRxOn -Turns on the receiver. This method is available only if the receiver property is enabled.
   - UART_MODBUS_TurnRxOff -Turns off the receiver. This method is available only if the receiver property is enabled.

Module "TEXT"      (component Utility)
   - TEXT_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - TEXT_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - TEXT_chcat -Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.
   - TEXT_Num8sToStr -Converts a signed 8bit value into a string.
   - TEXT_Num8uToStr -Converts an unsigned 8bit value into a string.
   - TEXT_Num16sToStr -Converts a signed 16bit value into a string.
   - TEXT_Num16uToStr -Converts a signed 16bit value into a string.
   - TEXT_Num32uToStr -Converts an unsigned 32bit value into a string.
   - TEXT_Num32sToStr -Converts a signed 32bit value into a string.
   - TEXT_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - TEXT_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - TEXT_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - TEXT_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - TEXT_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - TEXT_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - TEXT_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - TEXT_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - TEXT_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - TEXT_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - TEXT_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - TEXT_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - TEXT_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - TEXT_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - TEXT_strcatNum8Hex -Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).
   - TEXT_strcatNum16Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - TEXT_strcatNum24Hex -Appends a 32bit unsigned value to a buffer as hex number (without a 0x prefix). Only 24bits are used.
   - TEXT_strcatNum32Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - TEXT_IsLeapYear -Returns true if a given year is a leap year
   - TEXT_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - TEXT_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - TEXT_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - TEXT_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - TEXT_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - TEXT_ScanDecimal8uNumber -Scans a decimal 16bit unsigned number
   - TEXT_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - TEXT_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - TEXT_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - TEXT_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - TEXT_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - TEXT_strcmp -Wrapper to the standard strcmp() routine
   - TEXT_strncmp -Wrapper to the standard strncmp() routine
   - TEXT_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - TEXT_strlen -Wrapper to the standard strlen() function.
   - TEXT_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by writing 
                a zero byte to the string!)

Module "Status_LED" (component BitIO)
   - Status_LED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Status_LED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Status_LED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - Status_LED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Status_LED_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "BIT0"      (component BitIO)
   - BIT0_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BitLed_Azul" (component BitIO)
   - BitLed_Azul_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - BitLed_Azul_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BitLed_Azul_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BitLed_Azul_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - BitLed_Azul_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "BIT1"      (component BitIO)
   - BIT1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BIT2"      (component BitIO)
   - BIT2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BIT3"      (component BitIO)
   - BIT3_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BIT4"      (component BitIO)
   - BIT4_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BIT5"      (component BitIO)
   - BIT5_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BIT6"      (component BitIO)
   - BIT6_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "BIT7"      (component BitIO)
   - BIT7_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Btn_Emergencia" (component ExtInt)
   - Btn_Emergencia_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - Btn_Emergencia_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - Btn_Emergencia_GetVal -Returns the actual value of the input pin of the component.

Module "Encoder_DD" (component BitIO)
   - Encoder_DD_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Encoder_DI" (component BitIO)
   - Encoder_DI_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Encoder_TD" (component BitIO)
   - Encoder_TD_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Encoder_TI" (component BitIO)
   - Encoder_TI_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Cpu"       (component MK64FN1M0LL12)

===================================================================================
